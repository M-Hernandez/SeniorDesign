#include <ESP8266WiFi.h>
#include <PubSubClient.h>
extern "C"
{
#include "libb64/cdecode.h"
}
#define LED 


//const char *ssid = "MySpectrumWiFi07-2G";
//const char *password = "soccerchorus853";

const char *ssid = "MySpectrumWiFi07-2G";
const char *password = "soccerchorus853";

const char *topic = "light";
#define outputPin  D6 
#define zerocross  D2 

// Find this awsEndpoint in the AWS Console: Manage - Things, choose your thing
// choose Interact, its the HTTPS Rest endpoint
const char *awsEndpoint = "a36gd73tzligrm-ats.iot.us-east-1.amazonaws.com";

// For the two certificate strings below paste in the text of your AWS
// device certificate and private key, comment out the BEGIN and END
// lines, add a quote character at the start of each line and a quote
// and backslash at the end of each line:

// xxxxxxxxxx-certificate.pem.crt
const String certificatePemCrt = \
//-----BEGIN CERTIFICATE-----
"MIIDWjCCAkKgAwIBAgIVAMgcBG3X5gQE2mtgOdRt1TTcHfj1MA0GCSqGSIb3DQEB" \
"CwUAME0xSzBJBgNVBAsMQkFtYXpvbiBXZWIgU2VydmljZXMgTz1BbWF6b24uY29t" \
"IEluYy4gTD1TZWF0dGxlIFNUPVdhc2hpbmd0b24gQz1VUzAeFw0yMTAyMjQwMTMw" \
"MDVaFw00OTEyMzEyMzU5NTlaMB4xHDAaBgNVBAMME0FXUyBJb1QgQ2VydGlmaWNh" \
"dGUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC+6blYzpruy+RTZsN8" \
"7HwhBITacRpbEzvGU1AxjXnszy1vfxTjX+Uu8PV6pFdeppc65ClatrB+q+bybaAC" \
"m/kEJpbwxXLgU3NYgYNSnDbdXhzxPsevsRCRyV098YzCKHlDHzVX4uAzl+9kfDgm" \
"kBSMkFYdHZ82FYcE+Q9ialpszaogUVmXJA7pIkd7JKiXE4ktGOvIRESiOYtFMjld" \
"Ljx07n2IoN/22VwpuaHnFRwpufSL4rfk1O22G1OGj9hspHxtsYeqov5jhJpqxQMj" \
"8RiCA3TY5zA0UfrGw6R2nIpLbU0Anrg/TO9EQ3oylACS/pdKRqi7YRUGWWviG9+X" \
"tsa9AgMBAAGjYDBeMB8GA1UdIwQYMBaAFAOlPqcO0CncEK11aUx02dy6Ql+gMB0G" \
"A1UdDgQWBBQA/hki2p203ZGCa1xcWj6Ax8OCPzAMBgNVHRMBAf8EAjAAMA4GA1Ud" \
"DwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEAgekTo5G7GmrFvkR9L0/6/moT" \
"eNUqJTFqaYW1tZlejjVvDmt6QtIlg8D/0oa0UBug+lSVs9lOoBgwxLsDnWrZRHh+" \
"aMzk1MavuoLeVjR3I9Kwx9RKGPqUbvU3lN5Dzv/cgdoTvyEpfEHVTd4EPWlJQk4M" \
"KIGbT91dIaQJPa9SNO1Gxl4izhDy725r967LRfN2wF9dB/oYLPmJsXFquMhWVKbo" \
"3K54PsyPlKhLIfeRqKtslbRSkM7M8yMK/V3xB5j0J/1fG1XGyzlGB+vPavS27222" \
"zsgs7Dze+XJ+BnKL8gTI2dkcSrt2V2Kl5lgSr26tFC/yMCmNzpyYYJJvsuoNRg==";
//-----END CERTIFICATE-----

// xxxxxxxxxx-private.pem.key
const String privatePemKey = \
//-----BEGIN RSA PRIVATE KEY-----
"MIIEogIBAAKCAQEAvum5WM6a7svkU2bDfOx8IQSE2nEaWxM7xlNQMY157M8tb38U" \
"41/lLvD1eqRXXqaXOuQpWrawfqvm8m2gApv5BCaW8MVy4FNzWIGDUpw23V4c8T7H" \
"r7EQkcldPfGMwih5Qx81V+LgM5fvZHw4JpAUjJBWHR2fNhWHBPkPYmpabM2qIFFZ" \
"lyQO6SJHeySolxOJLRjryEREojmLRTI5XS48dO59iKDf9tlcKbmh5xUcKbn0i+K3" \
"5NTtthtTho/YbKR8bbGHqqL+Y4SaasUDI/EYggN02OcwNFH6xsOkdpyKS21NAJ64" \
"P0zvREN6MpQAkv6XSkaou2EVBllr4hvfl7bGvQIDAQABAoIBAGCm/UH7ny6EJP0g" \
"SpoFM7aXjhb1Kc2wCBQY+8GKiY6dOLh40v9l/iZssSq85sqxdmDHQDR/xwzqRIq5" \
"e0e25TP3wXT10XnGZeAJ+Y0qLxCVY/uyt++3qdbU5hLFJmjpirKzqxLqdm1IX1c1" \
"GExVp0GelSo6Y+9CqM+Ys/Q0OcFY4LcO/oiM/1ZYZTgDpXWKLym7eQ9Ng6fZo8X3" \
"3aBp4s3Oxdv670i1r42wsmFgP2MRcX423HTdN887ohJLbgBCf4kB7H2Ba7cxpu+y" \
"B2aNReYpjtleDiwg2Dw9wVF6nmj/2hj0fGvVNvGaDrS64qrc2fyxkSqWeKbZ67ZR" \
"KaluzWECgYEA9qStNoGM719Y5zEpFU1G7wAbMQv76rfEUcaiPcSnPXAQIBN7GiNW" \
"w+JEmHbEzE2JDj1NKnM5qfQGux32B9ump91l4W5kk47Vr8kW7tQW03JPeAt1vjNa" \
"i/4Nr1/Q03cOC6dmUBbaKkmrjmaCDy99EiYK5jl2Qsmjndme2NEUHSkCgYEAxifP" \
"42ruCqwZuyVtOWv7jgI5xllwlNKVS0ZBgGeHTZkrB/QwQ5xV0Ybi3qGevISqR3Ff" \
"JM4kyNfZzpDZkz6DqUBbaKMsGTWJMX9wGSMyT3dsCc3YWIRvQ0oyNQMTKaKA20Nl" \
"UTOF7+E1bXA5qwnmNCcxJtlql36u01EMSs0FO3UCgYBPkesLtZnZM+KDm5mMdMTY" \
"oCkllp8sJyMf2rxGvyXRLVEWeBJz6Ui5o0rMAS0WWEFKJb66XjgRO1fckBrqiBNo" \
"/oU6yBmMfT01G+PZIvVGPA+lQ9U1im3A0jJqDLhbMIKIgfYBCo5RrDi7lRiKe6CW" \
"9Uz43zrm6xRs/WNAwZsCmQKBgDmT6ek38fEx7swdZO5xfQfXh7gl1vu3cOANiwzn" \
"iD45CnLmNnv+2kTmv9dW+QvoNJ5LyAymxbOCXOyT1FTfrlwosibmevLcRoAWepkj" \
"TAQhPEhhAsM9wCK6VXpn6VKIwI51t+PvZ7S7KM4i9O7JEpYG6VZTiJB6pAwNGdhG" \
"WIXdAoGAHL/7ch9XsEnEvlG47uewi3CvyYnXXg1j51TDHqqilPwfFFzkcr9jLY59" \
"1RMbjuE4EL04Xf+B1EwfI5wUHjwGkSfidBj3JJJwAMfb/t5QAjtFgKH/c88BRC/c" \
"OTaEJjh+mbAIWbAohDaVvyunYSNR8YZx54P+aCsBbVmInmpbcLE=";
//-----END RSA PRIVATE KEY-----

// This is the AWS IoT CA Certificate from:
// https://docs.aws.amazon.com/iot/latest/developerguide/managing-device-certs.html#server-authentication
// This one in here is the 'RSA 2048 bit key: Amazon Root CA 1' which is valid
// until January 16, 2038 so unless it gets revoked you can leave this as is:
const String caPemCrt = \
//-----BEGIN CERTIFICATE-----
"MIIDQTCCAimgAwIBAgITBmyfz5m/jAo54vB4ikPmljZbyjANBgkqhkiG9w0BAQsF"
"ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6"
"b24gUm9vdCBDQSAxMB4XDTE1MDUyNjAwMDAwMFoXDTM4MDExNzAwMDAwMFowOTEL"
"MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJv"
"b3QgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJ4gHHKeNXj"
"ca9HgFB0fW7Y14h29Jlo91ghYPl0hAEvrAIthtOgQ3pOsqTQNroBvo3bSMgHFzZM"
"9O6II8c+6zf1tRn4SWiw3te5djgdYZ6k/oI2peVKVuRF4fn9tBb6dNqcmzU5L/qw"
"IFAGbHrQgLKm+a/sRxmPUDgH3KKHOVj4utWp+UhnMJbulHheb4mjUcAwhmahRWa6"
"VOujw5H5SNz/0egwLX0tdHA114gk957EWW67c4cX8jJGKLhD+rcdqsq08p8kDi1L"
"93FcXmn/6pUCyziKrlA4b9v7LWIbxcceVOF34GfID5yHI9Y/QCB/IIDEgEw+OyQm"
"jgSubJrIqg0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMC"
"AYYwHQYDVR0OBBYEFIQYzIU07LwMlJQuCFmcx7IQTgoIMA0GCSqGSIb3DQEBCwUA"
"A4IBAQCY8jdaQZChGsV2USggNiMOruYou6r4lK5IpDB/G/wkjUu0yKGX9rbxenDI"
"U5PMCCjjmCXPI6T53iHTfIUJrU6adTrCC2qJeHZERxhlbI1Bjjt/msv0tadQ1wUs"
"N+gDS63pYaACbvXy8MWy7Vu33PqUXHeeE6V/Uq2V8viTO96LXFvKWlJbYK8U90vv"
"o/ufQJVtMVT8QtPHRh8jrdkPSHCa2XV4cdFyQzR1bldZwgJcJmApzyMZFo6IQ6XU"
"5MsI+yMRQ+hDKXJioaldXgjUkK642M4UwtBV8ob2xJNDd2ZhwLnoQdeXeGADbkpy"
"rqXRfboQnoZsG4q5WTP468SQvvG5";
//-----END CERTIFICATE-----

WiFiClientSecure wiFiClient;
void msgReceived(char *topic, byte *payload, unsigned int len);
void pubSubErr(int8_t MQTTErr);
PubSubClient pubSubClient(awsEndpoint, 8883, msgReceived, wiFiClient);
dimmerLamp dimmer(outputPin, zerocross);
void setup()
{
  pinMode(LED_PIN, OUTPUT);
  
  Serial.begin(115200);
  Serial.println();
  Serial.println("LED TEST AWS IOT");

  //Connecting to the Wifi
  Serial.print("Connecting to ");
  Serial.print(ssid);
  WiFi.begin(ssid, password);
  WiFi.waitForConnectResult();
  Serial.print(", WiFi connected, IP address: ");
  Serial.println(WiFi.localIP());

  // get current time, otherwise certificates are flagged as expired
  setCurrentTime();

  //Setting the certificates for AWS
  uint8_t binaryCert[certificatePemCrt.length() * 3 / 4];
  int len = b64decode(certificatePemCrt, binaryCert);
  wiFiClient.setCertificate(binaryCert, len);
  uint8_t binaryPrivate[privatePemKey.length() * 3 / 4];
  len = b64decode(privatePemKey, binaryPrivate);
  wiFiClient.setPrivateKey(binaryPrivate, len);
  uint8_t binaryCA[caPemCrt.length() * 3 / 4];
  len = b64decode(caPemCrt, binaryCA);
  wiFiClient.setCACert(binaryCA, len);
  Serial.println("Entered AWS Credentials");
}

unsigned long lastPublish;
int msgCount;

void loop()
{
  pubSubCheckConnect();
}

void msgReceived(char *topic, byte *payload, unsigned int length)
{
  String message;
  
  for (int i = 0; i < length; i++)
  {
    message = message + (char)payload[i];
  }
  Serial.print("Message received on topic");
  Serial.print(topic);
  Serial.print(": ");
  Serial.println(message);
  dimmer.setPower(outVal); // setPower(0-100%);
  delay(10);

}

void pubSubCheckConnect()
{
  if (!pubSubClient.connected())
  {
    Serial.print("PubSubClient connecting to: ");
    Serial.println(awsEndpoint);

    while (!pubSubClient.connected())
    {
      pubSubClient.connect("LightClient");
      pubSubErr(pubSubClient.state());
      pubSubClient.publish(topic, "Hello");
    }
    pubSubClient.subscribe(topic);
  }
  pubSubClient.loop();
}

int b64decode(String b64Text, uint8_t *output)
{
  base64_decodestate s;
  base64_init_decodestate(&s);
  int cnt = base64_decode_block(b64Text.c_str(), b64Text.length(), (char *)output, &s);
  return cnt;
}

void setCurrentTime()
{
  configTime(3 * 3600, 0, "pool.ntp.org", "time.nist.gov");

  Serial.print("Waiting for NTP time sync: ");
  time_t now = time(nullptr);
  while (now < 8 * 3600 * 2)
  {
    delay(500);
    Serial.print(".");
    now = time(nullptr);
  }
  Serial.println("");
  struct tm timeinfo;
  gmtime_r(&now, &timeinfo);
  Serial.print("Current time: ");
  Serial.print(asctime(&timeinfo));
}

void pubSubErr(int8_t MQTTErr)
{
  if (MQTTErr == MQTT_CONNECTION_TIMEOUT)
    Serial.println("Connection timeout");
  else if (MQTTErr == MQTT_CONNECTION_LOST)
    Serial.println("Connection lost");
  else if (MQTTErr == MQTT_CONNECT_FAILED)
    Serial.println("Connect failed");
  else if (MQTTErr == MQTT_DISCONNECTED)
    Serial.println("Disconnected");
  else if (MQTTErr == MQTT_CONNECTED)
    Serial.println("Connected");
  else if (MQTTErr == MQTT_CONNECT_BAD_PROTOCOL)
    Serial.println("Connect bad protocol");
  else if (MQTTErr == MQTT_CONNECT_BAD_CLIENT_ID)
    Serial.println("Connect bad Client-ID");
  else if (MQTTErr == MQTT_CONNECT_UNAVAILABLE)
    Serial.println("Connect unavailable");
  else if (MQTTErr == MQTT_CONNECT_BAD_CREDENTIALS)
    Serial.println("Connect bad credentials");
  else if (MQTTErr == MQTT_CONNECT_UNAUTHORIZED)
    Serial.println("Connect unauthorized");
}
